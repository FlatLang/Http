package flat/http

import flat/datastruct/HashMap
import flat/time/Timer

class {
  public async run() -> Response => null {
    external {
      var headers = {};
    }

    native var Char[] data

    headers.forEach((pair) => {
      external {
        headers[#{pair.key.chars.data}] = #{pair.value.chars.data};
      }
    })

    log.debug("|
      Sending request:
        method: #{method}
        url: #{url}
        headers: #{headers.toJson()}
      |")

    let timer = Timer():start()

    external {
      try {
        const response = await #{Http.Global.axios}({
          method: #{method.chars.data},
          url: #{url.chars.data},
          headers: headers
        });

        #{timer:stop()};

        if (typeof response.data === 'string') {
          #{data} = response.data;
        } else if (typeof response.data === 'object') {
          #{data} = JSON.stringify(response.data)
        } else {
          console.error("Failed for content-type", typeof response.data);
        }
      } catch (e) {
        #{timer:stop()};
        console.error(e);
        #{throw Exception("Request unsuccessful")};
      }
    }

    log.debug("|
      Received response for request (#{timer.duration}ms):
        method: #{method}
        url: #{url}
        headers: #{headers.toJson()}
      |")

    let responseData = String(data)

    log.trace("responseData: #{responseData}")

    return Response(
      data: responseData
    )
  }
}